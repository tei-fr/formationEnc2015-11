<?xml version="1.0" encoding="UTF-8"?><TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        
        <title xml:lang="fr">Initiation ODD</title>
        <author>Lou Burnard Consulting</author>
      </titleStmt>
      <publicationStmt>
        
        <p xml:lang="fr">Préparé pour ENC MasterPro 2015</p>
      </publicationStmt>
      <sourceDesc>
        <p>From previous talks in Tours, Paris, Barcelona, Paris, Graz...</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change who="#LB" when="2014-09-23">Revised for MM14</change>
      <change who="#LB" when="2014-02-17">Revised for Mutec</change>
      <change who="#LB" when="2013-10-20">Finalised for SUFCO formation, Oct 2013</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>
      
      <div xml:lang="fr">
        <head>À quoi ca sert, un ODD? </head>
        <p>Nous avons besoin de deux choses complémentaires : <list>
            <item>un schéma formel (utilisant un langage informatique tel que DTD, RELAX NG, W3C
              Schema, Schematron) qui peut contrôler<list>
                <item>quelles sont les balises disponibles ?</item>
                <item>dans quels contextes ?</item>
                <item>avec quels attributs ?</item>
                <item>avec quelles valeur ?</item>
                <item>en respectant quelles contraintes ?</item>
              </list>
            </item>


            <item>Une documentation pour expliciter aux utilisateurs / développeurs nos principes
              éditoriaux, nos principes de choix de balises, etc. : <list>
                <item>dans plusieurs langues naturelles ;</item>
                <item>dans plusieurs formats de fichiers (PDF, MsWord, HTML, epub,...).</item>
              </list></item>
            <!--         <item>Des outils informatiques pour transformer et gérer nos données XML.</item>
-->
          </list></p>
      </div>
      <div xml:lang="fr">
        <head>OK, mais pourquoi ODD? </head>
        <p>Ces attentes pourraient etre satisfaites en plusieurs manières. Les avantages ODD : <list>
            <item>un format XML bien établi, d</item>
            <item>faisant partie intégrale du système TEI</item>
            <item>permettant un traitement fortement integré avec d'autres systèmes TEI</item>
            <item>à la longue terme</item>
            <item>standardisée</item>
          </list></p>
      </div>
      
      <div xml:lang="fr">
        <head>L'idée essentielle de ODD</head>
        <p rend="box"><hi>O</hi>ne <hi>D</hi>ocument <hi>D</hi>oes it all</p>
        <p>Un vocabulaire spécialisé pour la définition :<list>
            <item>des schémas</item>
            <item>des types d’élément XML, indépendants des schémas</item>
            <item>des regroupements de tels éléments, publics ou privés </item>
            <item>des patrons (MLE macros) et des spécifications de donnée (datatype)</item>
            <item>des classes (et sous-classes) d’éléments</item>
            <item>des références de tels objets</item>
          </list>
        </p>
        <p>Un <hi>schéma</hi> peut combiner :<list>
            <item>des objets identifiables (dans la liste ci-dessus)</item>
            <item>des objets appartenant à d’autres espaces de nom</item>
          </list></p>
        <p rend="box">et devrait être intégrable dans un système de balisage documentaire
          classique</p>
      </div>
      <div xml:lang="fr">
        <head>L'idée essentielle de ODD 2</head>
        <p rend="box">Un ODD peut combiner plusieurs spécifications pour un meme objet <list>
            <item>une qui est <soCalled>canonique</soCalled>, referencee dans les Guidelines</item>
            <item>une (ou plusieurs) supplementaires, modifiées en partie ou totalement</item>
            <item>ces versions partielles peuvent etre presentes dans l'ODD ou bien heritées d'un
              ODD intermediaire</item>
          </list></p>
        <p>Les règles de combinaison sont explicites, mais un peu complèxes... </p>
      </div>
      
      <div xml:lang="fr">
        <head>Éléments essentiel d’un ODD</head>
        <list type="label">
          <label><gi>schemaSpec</gi></label>
          <item>définit et identifie un schéma</item>
          <label><gi>elementSpec</gi></label>
          <item>fournit la définition d’élément, entièrement ou en partie</item>
          <label><gi>elementRef</gi></label>
          <item>utilise une définition d’un élément existant</item>
          <label><gi>classSpec</gi></label>
          <item>fournit la définition d’une classe</item>
          <label><gi>classRef</gi></label>
          <item>utilise une définition de classe existante</item>
          <label><gi>moduleRef</gi></label>
          <item>fournit un ensemble de spécifications d’éléments en faisant référence à un
              <soCalled>module</soCalled>
          </item>
        </list>
        <p rend="box">(Nous reviendrons plus loin sur les composants documentaire d’un ODD)</p>
      </div>
      
      <div xml:lang="fr">
        <head>Un premier exemple simplissime</head>
        <p rend="box">Nous utilisons un élément <gi>book</gi>, qui contient un mélange d’éléments
            <gi>para</gi>s et <gi>image</gi>s. Nous ne connaissons rien de la TEI, et n’en avons pas
          envie. De même pour les espaces de noms.</p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
          <schemaSpec ns="" start="book" ident="bookSchema">
            <elementSpec ident="book">
              <desc>Élément racine d’un schéma simplissime pour encoder les livres</desc><desc/>
              <content>
                <alternate maxOccurs="unbounded">
                  <elementRef key="para"/>
                  <elementRef key="image"/>
                </alternate>
              </content>
            </elementSpec>
            <!-- ... la suite à la prochaine diapo -->
          </schemaSpec>
        </egXML>
      </div>
      
      <div xml:lang="fr">
        <head>Un exemple simplissime (suite)</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:rng="http://relaxng.org/ns/structure/1.0" rend="tiny">
          <schemaSpec ns="" start="stuff" ident="oddex-1">
            <!-- ... suite -->
            <elementSpec ident="para">
              <desc>un paragraphe de text </desc>
              <content>
                <textNode/>
              </content>
            </elementSpec>
            <elementSpec ident="image">
              <desc>un élément vide qui pointe sur un fichier graphique</desc>
              <content/>
              <attList>
                <attDef ident="href">
                  <desc>fournit l’URI de l'objet ciblé</desc>
                  <datatype>
                    <rng:data type="anyURI"/>
                  </datatype>
                </attDef>
              </attList>
            </elementSpec>
          </schemaSpec>
        </egXML>
      </div>
      
      <div xml:lang="fr">
        <head>So what ?</head>
        <list>
          <item>On peut maintenant générer un schéma RELAX NG, W3C, ou DTD à l’aide d’une
            transformation XSLT</item>
          <item>On peut extraire les fragments documentaires, notamment les descriptions des
            éléments et des attributs</item>
        </list>
        <p>TEI fournit un élément spécialisé pour cela : <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"><specList>
              <specDesc key="para"/>
              <specDesc key="picture"/>
            </specList></egXML>
        </p>
        <p>Ce balisage généra quelque chose comme : <list type="gloss">
            <label><gi>para</gi></label>
            <item>un paragraphe de texte </item>
            <label><gi>picture</gi></label>
            <item>un élément vide qui pointe sur un fichier graphique</item>
          </list>
        </p>
      </div>
      
      <div xml:lang="fr" type="tp">
        <head>Essayons cela avec oXygen… </head>
        <list>
          <item>Démarrez oXygen</item>
          <item>Créez un nouveau fichier (CTRL-N)</item>
          <item>Sélectionnez <ident>TEI-P5 -&gt; ODD Customization</ident> dans le menu <ident>Cadre
              des modèles</ident> du dialog <ident>Nouveau</ident></item>
          <item>Remplacer l'élément <gi>schemaSpec</gi> proposé par le contenu du fichier
              <ident>oddex-1.xml</ident></item>
          <item> Insérez le contenu du fichier <ident>oddex-1-doc.xml </ident>
            <emph>avant</emph> le nouveau <gi>schemaSpec</gi></item>
          <item>Enregistrez votre ODD sous le nom <ident>oddex-1.odd</ident></item>
          <item>Sélectionnez les Scénario de Transformation <ident>TEI ODD to RELAX NG XML</ident>
            et <ident>TEI ODD to HTML</ident> pour générer un schéma et sa documentation a partir de
            cet ODD</item>
          <item>Enregistrer le schéma obtenu sous le nom <ident>oddex-1.rng</ident></item>
          <item>Associez votre schéma avec le fichier test <ident>oddex-1-test.xml</ident> et
            validez le fichier</item>
        </list>
      </div>
      
      <div xml:lang="fr">
        <head>Notions de classe 1</head>
        <p>Dans le monde réel, le contenu de nos <gi>book</gi> ne se limite pas uniquement aux
            <gi>para</gi>s et aux <gi>image</gi>s... on peut regrouper tous les éléments qui peuvent
          apparaître au sein d’un <ident>book</ident> : nous appelons ce regroupement une
            <term>classe</term>, pour laquelle nous proposons le nom <ident>bookPart</ident>.</p>
        <p>Nous utilisons l’élément <gi>classes</gi> pour indiquer l’association d’un élément avec
          une classe : <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
            <elementSpec ident="para">
              <!--…-->
              <classes>
                <memberOf key="bookPart"/>
              </classes>
              <!-- …-->
            </elementSpec>
          </egXML>
        </p>
        <p>Et voici la définition de la classe <ident>bookPart</ident>.</p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <classSpec ident="bookPart" type="model">
            <desc>éléments qui ont la possibilité de figurer dans un <gi>book</gi></desc>
          </classSpec>
        </egXML>
      </div>
      
      <div xml:lang="fr">
        <head>Usage d’une classe de modelisation</head>
        <p>Maintenant, au lieu de lister exhaustivement tous les composants possibles d’un
            <gi>book</gi>, il suffit de dire que cet élément est composé des membres de la classe
            <ident>bookPart</ident> .</p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <elementSpec ident="book">
            <desc>Élément racine d’un schéma simplissime pour encoder les livres</desc>
            <content>
              <classRef key="bookPart" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec></egXML>
        <p>(Dès que nous découvrirons l’existence de listes dans les livres nous saurons quoi
          faire)</p>
      </div>
      
      <div xml:lang="fr">
        <head>Définition d’une classe d’attribut</head>
        <p>Dans le monde réel, il est très probable que plusieurs éléments différents comportent les
          même attributs : il sera donc très pratique de les définir en une seule fois</p>
        <p> ODD nous permet de dire que tous les éléments ayant en commun un ensemble d’attributs
          constituent une classe <term>attribute class</term> que nous définissons ainsi <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <classSpec ident="pointing" type="atts">
              <desc>les membres de cette classe ont tous un attribut <att>href</att>
              </desc>
              <attList>
                <attDef ident="href">
                  <desc>fournit l’URI de l’objet ciblé</desc>
                  <datatype>
                    <rng:data xmlns:rng="http://relaxng.org/ns/structure/1.0" type="anyURI"/>
                  </datatype>
                </attDef>
              </attList>
            </classSpec>
          </egXML></p>
      </div>
      
      <div xml:lang="fr">
        <head>Testez votre compréhension</head>
        <list>
          <item>Ouvrez le fichier <ident>oddex-2.xml</ident> avec oXygen et comparez le avec
              <ident>oddex-1.odd</ident></item>
          <item>Créez une nouvelle version du schéma à partir de cet ODD</item>
          <item>Assurez vous que le fichier test <ident>oddex-1-test.xml</ident> reste valide contre
            cette nouvelle version du schéma </item>
        </list>
      </div>
      
      <div xml:lang="fr">
        <head>Classe d’attribut : un exemple</head>
        <p>Les valeurs possibles d’un attribut peuvent être contrôlées de plusieurs manières : <list>
            <item>Par référence à un <term>datatype</term> (type de donnée) externe, par ex
                <code>anyURI </code> or <code>ID</code> (ce sont des datatypes standard, définis par
              le W3C)</item>
            <item>En fournissant notre propre liste des valeurs avec l’élément <gi>valList</gi>
            </item>
          </list></p>
        <p>Par exemple… <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:rng="http://relaxng.org/ns/structure/1.0" rend="tiny">
            <classSpec ident="bookAtts" type="atts"><desc>attributs applicables aux objets contenus
                par des <gi>book</gi></desc>
              <attList>
                <attDef ident="xml:id">
                  <desc>fournit un identifiant unique pour le composant</desc>
                  <datatype>
                    <data xmlns="http://relaxng.org/ns/structure/1.0" type="ID"/>
                  </datatype>
                </attDef>
                <attDef ident="status">
                  <desc>indique le statut de l’élément </desc>
                  <valList>
                    <valItem ident="red"/>
                    <valItem ident="green"/>
                    <valItem ident="unknown"/>
                  </valList>
                </attDef>
              </attList>
            </classSpec>
          </egXML></p>
      </div>
      
      <div xml:lang="fr">
        <head>Tester votre compréhension…</head>
        <list>
          <item>Insérez dans votre fichier <ident>oddex-2.odd</ident> la définition d’une classe
            d’attribut (il y en a une dans le fichier <ident>oddex-3.xml</ident>)</item>
          <item>Ajoutez un <gi>memberOf</gi> pour les éléments qui vont participer à cette
            classe</item>
          <item>Générez un schéma et assurez-vous que le fichier <ident>oddex-1-test.xml</ident>
            reste valide avec cette version du schéma.</item>
          <item>Contrôlez que oXygen vous propose ces nouveaux attributs, et qu’il contraint
            correctement les valeurs possibles</item>
        </list>
      </div>
      
      <div xml:lang="fr">
        <head>Qu’est-ce que l’on pourrait vouloir ajouter pour bien documenter son système ?</head>
        <p>Peut-être… <list>
            <item>Des gloses, des descriptions en plusieurs langues</item>
            <item>Des exemples d’usage</item>
            <item>des contraintes plus sophistiquées <list>
                <item>modèles de contenu plus complexes</item>
                <item>contraintes variables selon le contexte</item>
              </list></item>
          </list></p>
        <p rend="box">Et comme tout projet de documentation : versioning, référencements extérieurs,
          mappings ontologiques…</p>
      </div>
      <!-- <div xml:lang="en">
        <head>Descriptions and glosses</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <elementSpec ident="para">
            <gloss>paragraph</gloss>
            <desc>marks paragraphs in prose.</desc>
            <desc xml:lang="zh-tw">標記散文的段落。</desc>
            <desc xml:lang="ja"> 散文の段落を示す． </desc>
            <desc xml:lang="fr">marque les paragraphes dans un texte en prose.</desc>
            <desc xml:lang="es">marca párrafos en prosa.</desc>
            <desc xml:lang="it">indica i paragrafi in prosa</desc>
            <!-\- ... -\->
          </elementSpec>
        </egXML>
      </div>
      <div xml:lang="fr">
        <head>Descriptions et gloses</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <elementSpec ident="para">
            <gloss>paragraph</gloss>
            <desc>marks paragraphs in prose.</desc>
            <desc xml:lang="zh-tw">標記散文的段落。</desc>
            <desc xml:lang="ja"> 散文の段落を示す． </desc>
            <desc xml:lang="fr">marque les paragraphes dans un texte en prose.</desc>
            <desc xml:lang="es">marca párrafos en prosa.</desc>
            <desc xml:lang="it">indica i paragrafi in prosa</desc>
            <!-\- ... -\->
          </elementSpec>
        </egXML>
      </div>
      <div xml:lang="en">
        <head>Usage examples</head>
        <p>Documenting an XML schema requires the inclusion of examples in XML. If your
          documentation is also in XML, you need to be a little devious. There are three possible
          approaches: <list>
            <item>hide everything within a CDATA marked section</item>
            <item>Escape everything using entity references</item>
            <item>Use a different name space</item>
          </list>
        </p>
        <p rend="box">The last has the great advantage that you can validate your examples against
          an XML schema</p>
      </div>
      <div xml:lang="fr">
        <head>Exemples d’usage</head>
        <p>Évidemment, si on décrit un schéma XML on va inclure des exemples d’usage en XML. Si la
          documentation s’exprime également en XML, il faut être astucieux… Il y a trois approches possibles :<list>
            <item>tout cacher avec un "CDATA marked section" (magique hérité de SGML)</item>
            <item>tout échapper en utilisent des "références" (<code>&amp;amp;lt;</code> etc)</item>
            <item>utiliser un autre espace de nommage</item>
          </list>
        </p>
        <p rend="box">Seul le dernier vous permet de valider vos exemples : un plus très
          avantageux</p>
      </div>
      <div xml:lang="en">
        <head>For example </head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <eg>&lt;![CDATA[&lt;p>A paragraph&lt;/p> &#93;]></eg>
        </egXML>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <eg>
            <code lang="XML">&amp;lt;p>A paragraph&amp;lt;/p></code></eg></egXML>
        <egXML xmlns="http://www.tei-c.org/ns/Examples"> &lt;egXML
          xmlns="http://www.tei-c.org/ns/Examples"> <p>A paragraph</p> &lt;/egXML></egXML>
      </div>
      <div xml:lang="fr">
        <head>Par exemple </head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <eg>&lt;![CDATA[&lt;p>un paragraphe&lt;/p> &#93;]></eg>
        </egXML>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <eg>
            <code lang="XML">&amp;lt;p>un paragraphe&amp;lt;/p></code></eg></egXML>
        <egXML xmlns="http://www.tei-c.org/ns/Examples"> &lt;egXML
          xmlns="http://www.tei-c.org/ns/Examples"> <p>un paragraphe</p> &lt;/egXML></egXML>
      </div>
 -->
      
      <div xml:lang="fr">
        <head>Des contraintes plus sophistiquées </head>
        <list>
          <item>Les modèles de contenu peuvent être exprimés en <soCalled>pure ODD</soCalled>,
            indépendamment du langage de schéma</item>
          <item>Les valeurs d’attribut peuvent être controllés avec l’élément <gi>valList</gi> ou
              <gi>datatype</gi>, à plusieurs niveaux de généralité</item>
          <item>Les contraintes variables selon le contexte peuvent être exprimées en utilisant
            l’élément <gi>constraint</gi>
          </item>
        </list>
        <p rend="box">Nous allons introduire tout cela doucement… !</p>
      </div>
      <!-- <div>
        <head>Defining a content model in pure ODD</head>
        <p> The <gi>content</gi> element can contain</p>
        <list>
          <item>References to other elements <gi>elementRef</gi></item>
          <item>References to classes of element <gi>classRef</gi></item>
          <item>Alternations of the foregoing <gi>alternate</gi></item>
          <item>Sequences of the foregoing <gi>sequence</gi></item>
          <item>Interleaved instances of the foregoing <gi>interleave</gi> (<hi rend="bold">Warning:
              this is not yet implemented</hi>)</item>
        </list>
        <p>Attributes <att>minOccurs</att> and <att>maxOccurs</att> can be used to control
          repetition</p>
      </div>-->
      
      <div xml:lang="fr">
        <head>Et enfin, un mot de la TEI</head>
        <p>Admettons enfin que notre <gi>para</gi> n’est pas si loin de l’élément TEI <gi>p</gi>,
          que notre <gi>image</gi> ressemble beaucoup à l’élément TEI <gi>graphic</gi>, et que notre
            <gi>book</gi> pourrait être considéré comme un élément TEI <gi>div</gi>. Comment
          ré-écrire ce schéma pour profiter des définitions TEI existantes ? </p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <schemaSpec start="div" ident="testSchema-2" source="tei:1.6.0">
            <elementRef key="div"/>
            <elementRef key="p"/>
            <elementRef key="graphic"/>
            <elementRef key="figure"/>
            <moduleRef key="tei"/>
          </schemaSpec></egXML>
        <p>L’élément <gi>moduleRef</gi> nous fournit un ensemble de définitions infrastructurales,
          notamment pour les classes utilisées partout dans le systeme TEI. À part cela, nous
          n’avons besoin que de référencer les éléments TEI souhaités avec un <gi>elementRef</gi>.
        </p>
      </div>
      
      <div xml:lang="fr">
        <head>Création d'un schéma TEI</head>
        <list>
          <item>Chargez le fichier <ident>oddex-3.odd</ident> avec oXygen et comparez le avec les
            versions précédentes </item>
          <item>Transformez ce fichier en schéma, comme d’habitude.</item>
          <item>Le fichier <ident>oddex-3-test.xml</ident> contient une version TEI de notre fichier
            de test initial : validez-le avec le schéma que vous venez de créer.</item>
          <item>Notez qu’un document TEI <emph>doit</emph> utiliser l’espace de nommage TEI</item>
          <item>Notez également que les concepts TEI et les nôtres ne sont pas forcément identiques
            (par ex, usage de <gi>graphic</gi>)</item>
        </list>
        <p rend="box">Plus tard, nous verrons comment la TEI se sert du système ODD…</p>
      </div>
      <!--<div>
        <head>Notions de namespace 1</head>
        <list>
          <item> Un <term>namespace</term> (espace de noms) fournit une manière d’associer et
            distinguer un groupe de termes, typiquement d’éléments XML. </item>
          <item>Jusqu’à présent, tout ce qui a été nommé dans notre schéma appartient à un namespace
            "nul". </item>
          <item>Supposons que nous souhaitions ajouter un nouvel élément <gi>bit</gi> avec un modèle
            de contenu plus restreint. Ce <gi>bit</gi> ne contiendrait que de texte, mais nous
            souhaitons l'appeler un <gi>bit</gi> quand même. Pour le distinguer du <gi>bit</gi>
            existant, il faut l’associer à un autre espace de noms.</item>
          <item>L’attribut <att>ns</att> est disponible sur <gi>elementSpec</gi> pour préciser un
            espace de noms. Pour des raisons techniques, il faut aussi spécifier un prefixe unique.
          </item>
        </list>
      </div>
      <div>
        <head>Notions de namespace 2</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"
          xmlns:rng="http://relaxng.org/ns/structure/1.0">
          <elementSpec ident="bit" ns="http://myNamespace.org" prefix="extra">
            <desc>élément textuel du schéma simplissime (sans bob) </desc>
            <content allowText="true"/>
            <classes><memberOf key="stuffPart"/></classes>
          </elementSpec>
        </egXML>
        <p>Notez bien que ce nouvel élément fait partie de la classe <ident>stuffPart</ident> ;
          sinon il ne serait pas disponible dans nos documents.</p>
      </div>
      <div>
        <head>Tester votre compréhension...</head>
        <list>
          <item>Ajoutez des traductions dans d’autres langues (allemand, russe, italien, anglais...)
            des descriptions d'éléments</item>
          <item>Créez un nouvel élément <gi>truc</gi> qui devrait pouvoir apparaître dans un
              <gi>stuff</gi>
          </item>
          <item>Modifiez l’élément <gi>truc</gi> pour lui donner les attributs <att>n</att> et
              <att>status</att></item>
          <item>Modifiez la définition de l’attribut <att>status</att> pour lui permettre de prendre
            la valeur <code>orange</code>.</item>
        </list>
      </div>
      
      -->
    </body>
  </text>
</TEI>